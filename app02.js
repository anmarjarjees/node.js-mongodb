// APP2 => CREATE: Inserting a document to "abc-college.employees":

const { MongoClient } = require('mongodb');

// Importing our MongoDB Connection String:
const uri = require('./atlas_conn_str');

const client = new MongoClient(uri);

const dbName = "abc-college";

/* 
Attention:
Using different letter-case like "ABC-College" instead of "abc-college",
Mongo will throw this error:
MongoBulkWriteError: db already exists with different case already have: [abc-college] trying to create [ABC-College]
*/

// We need to specify the collection_name:
const collectionName = "employees"
/* 
 - "employees" => The name of the collection within the database
 - The "abcCollection" variable is for holding a reference to our MongoDB collection "employees"
 - Table (SQL) <==> Collection (MQL)
*/

// abc-college.employees

// To Access the database and the collection "ABC-College.employees"
// Creating and ABC-College Collection variable "abcCollection"
// this variable "abcCollection" will hold a reference to the MongoDB collection:
const abcCollection = client.db(dbName).collection(collectionName);

// Adding the insertion code:
/*
{
    "_id" { "Primary key: You will have a unique code generated by MongoDB for this document in collection" },
    emp_id: 'id value',
    name : 'Alex Chow',
    email : 'alexchow@learningMongoDBNode.ca',
    job_title: 'Developer',
    age: 58
}
*/
// 1. Creating the JS object variable to represent the BSON document:
const emp1 = {
    emp_id: 'emp123',
    name: 'Alex Chow',
    email: 'alexchow@abcMogoDBcollege.ca',
    job_title: 'Developer',
    age: 58,
    salary: 25,
    hired_date: new Date(),
}
/* 
NOTE TO REVIEW:
Although we skipped the id field in "emp1" object,
don't forget that MongoDB will assign the "_id" field automatically :-)
*/

async function run() {
    try {
        // Connect the client to the server	(optional starting in v4.7)
        await client.connect();
        console.log(`Connected to database: ${dbName}`);
        /*
        insert the "emp1" into the collection "employees" of "abc-college" 
        by calling the "insertOne()" method of our variable "abcCollection"

        NOTE:
        *****
        Using insertMany(), Mongo will throw this error:
        MongoInvalidArgumentError: Argument "docs" must be an array of documents
        */
        const result = await abcCollection.insertOne(emp1);
        /*  
        For testing:
        using the property "insertedId" of the promise object that insertOne() method returns

        the property "insertedId":
        The identifier that was inserted. 
        If the server generated the identifier, this value will be null as the driver does not have access to that data
        */
        console.log(`New document with auto-generated id value of ${result.insertedId} was inserted`);
        /* 
        New document with auto-generated id value of 661201f6d07e2599ff4fe60c was inserted
        */
    } finally {
        // Ensures that the client will close when you finish/error
        // await client.close();
        /* 
        NOTE: Since we need to try again using different way/logic,
        So we will comment the closing statement,
        otherwise this error:
        Connection Error: MongoNetworkError: connection establishment was cancelled
        */
    }
}

// Calling/Executing our connection function "run"
run().catch(console.dir);

/* 
The code will add this record:

_id: 661201f6d07e2599ff4fe60c
emp_id: "emp123"
name: "Alex Chow"
email: "alexchow@abcMogoDBcollege.ca"
job_title: "Developer"
age: 58
salary: 25,
hired_date: 2024-04-07T02:16:21.360+00:00
*/

/* 
Another alternative way, using arrow function:
**********************************************
*/
const test = async () => {
    try {
        await client.connect();
        const result = await abcCollection.insertOne(emp1);
        console.log(`New document was inserted with auto-generated id value of ${result.insertedId}`);
    } catch (err) {
        console.log(`Connection Error: ${err}`);
    }
    finally {
        // Ensures that the client will close when you finish/error
        await client.close();
    }
}

// calling our function "test()":
test();

/* 
IMPORTANT NOTE FOR TESTING/RUNNING THE CODE:
********************************************
Please be advised, that if you want to test the other way of using the arrow function,
you need to remove/delete/comment the previous way of using a normal function,
otherwise the catch block of the second way:
Connection Error: MongoNetworkError: connection establishment was cancelled
*/


